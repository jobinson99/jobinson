<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>黑传说</title>
    <description>乌抵天明</description>
    <link>http://jobinson.ga/</link>
    <atom:link href="http://jobinson.ga/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>五笔划+智能输入真的快</title>
        <description>&lt;p&gt;中文笔划输入法还是很不错的。&lt;/p&gt;

&lt;p&gt;今天试了下中文笔划输入法，该笔划输入法只有五个笔划（横竖撇点钩）联想，速度丝毫不差于拼音，对于我这新手都没感觉学习有难度和输入迟滞。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;手写输入法：5笔划+智能联想&lt;/h3&gt;

&lt;p&gt;5笔划+智能联想&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;汉字笔画&lt;/td&gt;
      &lt;td&gt;横&lt;/td&gt;
      &lt;td&gt;竖&lt;/td&gt;
      &lt;td&gt;撇&lt;/td&gt;
      &lt;td&gt;捺&lt;/td&gt;
      &lt;td&gt;折&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;对应编码&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;对应书写顺序&lt;/td&gt;
      &lt;td&gt;从左到右：横 提笔&lt;/td&gt;
      &lt;td&gt;从上到下：竖 竖左勾&lt;/td&gt;
      &lt;td&gt;从右上到左下：撇&lt;/td&gt;
      &lt;td&gt;从左上到右下 点 捺&lt;/td&gt;
      &lt;td&gt;所有带转折弯勾 横勾 竖右勾 弯勾&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;位置表示法：
数字键盘 轨迹 表示 笔划 起点 拐点 终点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;横交&lt;/li&gt;
  &lt;li&gt;竖交&lt;/li&gt;
  &lt;li&gt;撇交&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;捺交&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;合体字：二分结构 前2后3取码&lt;/li&gt;
  &lt;li&gt;独体字：首4末1取码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;词组：每字各取前三码。&lt;/p&gt;

&lt;p&gt;全键盘：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 2 3 4 5 6 7 8 9 0&lt;/li&gt;
  &lt;li&gt;gfdsa t r e w&lt;/li&gt;
  &lt;li&gt;yuiop hjkl&lt;/li&gt;
  &lt;li&gt;选字：zxcvbnm 空格&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;划为四区，每区笔划相同，以起笔所在区定位，作为开始。共20键。&lt;/p&gt;

&lt;p&gt;识别的关键在于：方向，路径和位置&lt;/p&gt;

</description>
        <pubDate>Sun, 2015 Apr 19 19:43:45 +0800</pubDate>
        <link>http://jobinson.ga/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/2015/04/19/%E4%BA%94%E7%AC%94%E5%88%92%E6%99%BA%E8%83%BD%E8%BE%93%E5%85%A5%E6%B3%95%E7%9C%9F%E7%9A%84%E5%BF%AB/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/2015/04/19/%E4%BA%94%E7%AC%94%E5%88%92%E6%99%BA%E8%83%BD%E8%BE%93%E5%85%A5%E6%B3%95%E7%9C%9F%E7%9A%84%E5%BF%AB/</guid>
      </item>
    
      <item>
        <title>跨平台开发：穿梭多个系统平台的统一开发环境</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;遇到的问题：&lt;/h2&gt;

&lt;p&gt;刚好接了朋友一个烂尾工程，工程用.net开发的，很乱。&lt;/p&gt;

&lt;p&gt;由于本人已经好多年在linux下生存，所有的生态链全部是用linux的，我需要用命令行，需要用软链，需要用emacs等，我需要统一整齐的管理文件，我不想用盗版软件！！！&lt;/p&gt;

&lt;p&gt;win实在太慢了，配置那么高级的电脑用各种软件却比我十年前标准配置的电脑还慢。&lt;/p&gt;

&lt;p&gt;window下搞开发实在很不方便，虽说有各种整合开发环境，但还是这欠缺那短少，比如iojs之类的构建、一些命令行下才可用的包，emacs之类的也很不方便……太多需要配置了。&lt;/p&gt;

&lt;p&gt;还有另一个问题：由于开发用的电脑不是我的，没法重装系统。&lt;/p&gt;

&lt;p&gt;项目经过分析之后，因为考虑到还需要构建两个适用于 安卓和苹果 系统的应用，未来可能还需要更多的应用编译。发现其实可以：.net继续后台，前台全部换用js。&lt;/p&gt;

&lt;p&gt;如果，后面如果还是我负责，那就全换了。&lt;/p&gt;

&lt;p&gt;经过几天郁闷的双电脑+双手机开发后，终于想到办法，解决这个 穿梭在各个平台设备开发的问题。&lt;/p&gt;

&lt;p&gt;先总结下：&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;我的需求：&lt;/h2&gt;

&lt;p&gt;我的设备：一个手机（应该是两部，一部刚好换掉了），两台电脑（一台自己多年用的，所有东西都在上面，一台是项目的，里面已经备有各种相应开发工具，但不适用于我）&lt;/p&gt;

&lt;p&gt;需求：平时开发只用一台电脑（当然是性能最好的那台），碎片时间用手机，在这台电脑和手机里，使用我熟悉和方便的工具，同时，收集到的经验，可以同步到我自己的电脑上。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;自己电脑：开发所需的东西，全用 git管理起来，可公开的全部github，不好公开的全部bitbucket或者gitlab 私库。&lt;/p&gt;

&lt;p&gt;项目的电脑：尽可能少用其本身软件，只用虚拟机，并且把虚拟机快照化，这样可以快速启动所需的环境。&lt;/p&gt;

&lt;p&gt;为了以备不时之需，还装了cygwin+emacs。&lt;/p&gt;

&lt;p&gt;软件：
cygwin和虚拟机都装了git emacs&lt;/p&gt;

&lt;p&gt;手机：一个编辑器+一个可管理git的工具。&lt;/p&gt;

&lt;h2 id=&quot;wincygwin&quot;&gt;试图和win融合：cygwin&lt;/h2&gt;

&lt;p&gt;一开始是想到用cygwin来实现，收集到了下面的工具和配置。&lt;/p&gt;

&lt;h3 id=&quot;cygwin&quot;&gt;cygwin增强&lt;/h3&gt;

&lt;p&gt;cygwin有一个软件管理工具apt-cyg 类似于debian的apt-get，有了这个就方便多了。&lt;/p&gt;

&lt;p&gt;安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lynx -source rawgit.com/transcode-open/apt-cyg/master/apt-cyg &amp;gt; apt-cyg
install apt-cyg /bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-cyg install nano
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可用操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;remove 删除&lt;/li&gt;
  &lt;li&gt;update 升级&lt;/li&gt;
  &lt;li&gt;depends 某软件的依赖的列表&lt;/li&gt;
  &lt;li&gt;rdepends 依赖某软件的列表&lt;/li&gt;
  &lt;li&gt;list 列出本地软件&lt;/li&gt;
  &lt;li&gt;listall 列出本地和远程软件&lt;/li&gt;
  &lt;li&gt;show 某软件信息&lt;/li&gt;
  &lt;li&gt;category 列出某类软件列表&lt;/li&gt;
  &lt;li&gt;search 搜寻本地软件&lt;/li&gt;
  &lt;li&gt;seacrchall 搜寻本地和远程软件&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cygwinbabun&quot;&gt;配置好的cygwin：babun&lt;/h3&gt;

&lt;p&gt;如果自己配置觉得麻烦，可以使用已经配置好cygwin的 &lt;a href=&quot;http://babun.github.io/&quot;&gt;Babun&lt;/a&gt; ，其中有些功能，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pact – 软件包管理器&lt;/li&gt;
  &lt;li&gt;集成oh-my-zsh&lt;/li&gt;
  &lt;li&gt;配置好的git和shell&lt;/li&gt;
  &lt;li&gt;自动升级&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Babun的安装也非常简单，从它的主页下载压缩包，解压，双击执行install.bat。&lt;/p&gt;

&lt;p&gt;但是：在win7 babun下，emacs图形界面版有问题！！！&lt;/p&gt;

&lt;p&gt;有个我没研究的问题，在babun下搞定了，就是配置可以访问win的其他目录：把几个关于window的盘符文件拷贝到cygwin的顶级目录下，即可。&lt;/p&gt;

&lt;h4 id=&quot;cygwin-&quot;&gt;【转】cygwin 增强配置&lt;/h4&gt;

&lt;p&gt;cygserver 服务器，用于运行大型的应用。Cygwin有一些特殊的功能, 如IPC Message Queues（消息队列）, XSI IPC Semaphores, XSI IPC Shared Memory（共享内存）.默认是没有打开的，要想使用这些功能, 必须先启动cygserver程序或服务&lt;/p&gt;

&lt;p&gt;cygserver可以作为一个服务安装, 启用的方法如下：终端执行:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cygserver-config(按照提示配置)
$net start cygserver(cygserver作为Windows操作系统的一个服务运行)
$net stop cygserver(停止cygserver, 也可以在Windows任务管理器里结束进程)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在$CYGWIN/Cygwin.bat里添加下面的配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$set CYGWIN=server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然你也可以在每次需要的时候手动启动:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cygwinserver &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者在 ~/.bashrc 添加如下内容（或者在windows环境变量里面配置）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CYGWIN=server
export CYGWIN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行 . ~/.bashrc 让其生效&lt;/p&gt;

&lt;p&gt;执行cygserver-config，并启动cygserver，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net start cygserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cygwin崩溃信息收集&lt;/p&gt;

&lt;p&gt;在缺省的 cygwin 环境下出错时并不产生 core 文件，而是产生一个stackdump文件，该文件所含信息比core文件少，不能当作core文件使用，为了产生真正的core文件，可以配置好下面的环境变量：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set CYGWIN=&quot;$CYGWIN error_start=dumper.exe -d %1 %2&quot;(在d:\cygwin\Cygwin.bat文件里)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export CYGWIN=&quot;$CYGWIN error_start=dumper.exe -d %1 %2&quot;(在.bashrc文件里)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;coredump时, cygwin会调用dumper.exe程序在当前目录下产生core文件. 但是不要对这个core文件抱太大的指望. 根据我的经验, 很多时候用bt列出的调用栈都是不可用的. 我也不知道为什么. 全局变量好像可以查看.&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;虚拟机模拟&lt;/h2&gt;

&lt;p&gt;摸索了几天cygwin后，感觉与其在一台电脑上构建一个cygwin，还不如直接虚拟机+快照，或者闪盘系统呢！！！这样完整且统一。&lt;/p&gt;

&lt;p&gt;如果是小系统拷到内存中。反正现在内存够。&lt;/p&gt;

&lt;p&gt;主要问题：cygwin的软件管理工具才刚起步，没有 类似 archlinux的 用户自治资源区（aur），没法方便查找和编译各种软件。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;准备工作：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;看看电脑主板是不是开启支持 硬件虚拟技术（Hardware Virtualization Technology (VT)），没开启就到bois开启。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;vbox下载地址&lt;/a&gt;，根据宿主机操作系统类型选择下载。另外，还需要扩展下载，也就是那个&lt;a href=&quot;&quot;&gt;VirtualBox 4.3.26 Oracle VM VirtualBox Extension Pack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本人的宿主机是win7，安装vbox问题，解决办法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;路径不含中文名&lt;/li&gt;
  &lt;li&gt;恢复系统主题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;安装操作系统&lt;/h3&gt;

&lt;p&gt;可以直接安装，也可直接下载已经安装好的系统镜像，节省时间。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://virtualboxes.org/tag/ova&quot;&gt;下载已有的镜像&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kickass.to&quot;&gt;搜镜像种子&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://mirrors.neusoft.edu.cn/android/repository/&quot;&gt;开源镜像站&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;开发用：sabayon 或者 archlinux+lxde 或者其他小型窗口管理器。用户名：archdev，密码：archdev。开发环境emacs，编译环境io.js cordova &lt;/li&gt;
  &lt;li&gt;运行应用用：
    &lt;ul&gt;
      &lt;li&gt;给php的：coreos（网络不通！！！！）或者其他极简部署用系统 使用ubuntu server php 密码 php。 运行php类，java类，&lt;/li&gt;
      &lt;li&gt;给 .net的：win 2008 server运行.net类，主机极致化。密码：1234567890&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;编译测试需要：
    &lt;ul&gt;
      &lt;li&gt;安卓虚拟机&lt;/li&gt;
      &lt;li&gt;ios&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sabayon 虽然根源于gentoo，但其内建双套软件管理工具的灵活机制，使得大部分不用编译。可支持开发经常需要的多版本共存。&lt;/p&gt;

&lt;p&gt;支持两套软件管理工具：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;entropy用来管理二进制包，相当于archlinux pacman&lt;/li&gt;
  &lt;li&gt;portage 用来管理源码包，相当于 archlinux makepkg abs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装有问题，直接下载镜像解决。两个预定的用户名和密码： root/sabayon; sabayon/sabayon&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;配置强化虚拟机系统&lt;/h3&gt;

&lt;p&gt;安装完成后，就可以用了，但为了更方便使用，需要进行下面的配置，其中重点是配置：文件共享和网络服务&lt;/p&gt;

&lt;h4 id=&quot;vboxlinux&quot;&gt;vbox虚拟机里的linux配置&lt;/h4&gt;

&lt;p&gt;默认安装就可以进入虚拟系统了，想要更多功能，需要进行下面配置。&lt;/p&gt;

&lt;h4 id=&quot;archlinux-&quot;&gt;archlinux 各种服务配置：&lt;/h4&gt;

&lt;p&gt;安装 virtualbox-guest-modules  virtualbox-guest-utils virtualbox-guest-dkms&lt;/p&gt;

&lt;p&gt;按安装后的提示，生成模块&lt;/p&gt;

&lt;p&gt;加载模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;modprobe -a vboxguest vboxsf vboxvideo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl enable vboxservice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;手动启动各种vbox的服务：比如双向粘贴，双向拖动文件，无缝模式……&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VBoxClient
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以一次启动所有 &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VBoxClientAll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让其启动即可使用这些服务：不过不建议这么做，因为出问题的时候，就没法救。如果有桌面，把VBoxClientAll 加入到autostart中，如果没有，就加入到  .xinitrc&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;文件共享设置：&lt;/h4&gt;

&lt;p&gt;把用户加入到vboxsf组中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpasswd -a $USER vboxsf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;VboxControl sharefolder&lt;/code&gt; 自动加载&lt;/p&gt;

&lt;p&gt;也可以手动加载：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mount -t vboxsf shared_folder_name mount_point_on_guest_system
比如：
mount -t vboxsf -o uid=1000,gid=1000 home /mnt/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mount.vboxsf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意加载文件夹的权限：755&lt;/p&gt;

&lt;p&gt;软链到桌面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s /media/ ~/my_documents
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动时自动加载：修改fstab&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xxx   /media/xxx    vboxsf  uid=user,gid=group,rw,dmode=700,fmode=600,comment=systemd.automount 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;换漂亮点的图标&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://content.wuala.com/contents/csslayer/eyecandy/icons/oxygen-old.tar.bz2&quot;&gt;kde4.6之前的图标好看，不足的部分应该可以用之后的图标补上&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;mac-os&quot;&gt;mac os虚拟机安装手记&lt;/h3&gt;

&lt;p&gt;需要引导工具&lt;/p&gt;

&lt;p&gt;下载镜像后，选择导入即可。&lt;/p&gt;

&lt;p&gt;因为版本本身不稳定（比如点击 Apple icon –&amp;gt; About This Mac，系统会崩溃），需要用 sw_vers 检查下版本：在启动界面，使用键盘快捷键Cmd + Space，开启命令行。（此处注意不要点按钮，会崩溃的）&lt;/p&gt;

&lt;p&gt;键盘输入问题：安装 &lt;a href=&quot;http://doublecommand.sourceforge.net/&quot;&gt;DoubleCommand&lt;/a&gt;，配置适合自己的输入方式。&lt;/p&gt;

&lt;p&gt;然后&lt;a href=&quot;http://developer.apple.com/programs/register/&quot;&gt;注册苹果账号&lt;/a&gt;，下载Xcode  和 iOS SDK。&lt;/p&gt;

&lt;p&gt;打开工程项目文件  hello/platforms/ios/hello.xcodeproj&lt;/p&gt;

&lt;h3 id=&quot;linuxioscygwin&quot;&gt;linux系统下的ios开发环境/cygwin也类似&lt;/h3&gt;

&lt;h2 id=&quot;section-8&quot;&gt;手机开发测试环境配置&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.appsfinder.fr&quot;&gt;查找应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://appcrawlr.com&quot;&gt;另一个查找应用的地方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-9&quot;&gt;在手机上运行各种应用&lt;/h3&gt;

&lt;p&gt;有空可探索：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Android + Linux Chroot + Node.js&lt;/li&gt;
  &lt;li&gt;firefoxos + &lt;/li&gt;
  &lt;li&gt;JXCore One of the key features in the recent release was the ability to run Node.js applications on mobile, both Android and iOS, while leveraging the full Node.js ecosystem on npm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除去直接硬刷linux系统到手机上外，还有三个软办法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一是获得root权限，然后安装busybox之类的。&lt;/li&gt;
  &lt;li&gt;另一个是编译安装 一个包管理器（等有空折腾debian的dpkg），&lt;/li&gt;
  &lt;li&gt;最后一个比较方便的是 安卓上的编程环境 terminalIDE。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;英文输入键盘：手写用 writepad&lt;/p&gt;

&lt;p&gt;英文虚拟电脑键盘用：terminal ide的键盘&lt;/p&gt;

&lt;p&gt;生成 身份认证：和linux上的ssh-keygen不同。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/.ssh        
dropbearkey -t rsa -f ~/.ssh/id_rsa
dropbearkey -y -f ~/.ssh/id_rsa | grep &quot;^ssh-rsa&quot; &amp;gt;&amp;gt; my_keydropbearkey -y -f ~/.ssh/id_rsa | sed -n 2p &amp;gt; ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一条命令是新建文件夹，第二条命令是 生成 私钥，第三条是本地安全管道开启密钥认证，第四条是把公钥拷到 &lt;em&gt;my_key&lt;/em&gt; 上，然后把 &lt;em&gt;my_key&lt;/em&gt; 拷到所需的git服务器上。&lt;/p&gt;

&lt;p&gt;修改下本地的配置&lt;/p&gt;

&lt;p&gt;新建一文件 ~/sssh （名字随意，只要下面相应改下对应的），内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/data/data/com.spartacusrex.spartacuside/files/system/bin/bash
exec ssh -i ~/.ssh/id_rsa &quot;$@&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改下执行权限和修改配置文件 ~/.bashrc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 755 ~/sssh
echo export GIT_SSH=~/sssh &amp;gt;&amp;gt; .bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这步搞定！&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;附带几句牢骚：&lt;/h3&gt;

&lt;p&gt;这几天被苹果系统问题卡住了所有的进度了：不是因为技术难度高，而是烦，尽搞些没用的限制——就有点像当年某些游戏用了俄国某种特别变态的加密程序，导致正版玩家体验也严重不爽一样，纯粹就是防贼防过头了。&lt;/p&gt;

&lt;p&gt;你牛叉系统可以说是为了提升效率，所以虽然入门有点难度，但经历过入门的不适应期后，简直如鱼得水。&lt;/p&gt;

&lt;p&gt;微软的系统可以说是为了适合一般人使用电脑，是以易用为追求的——虽然这个“易用”实在做得惨不忍睹。&lt;/p&gt;

&lt;p&gt;苹果呢？号称是为了设计师，可是再怎么强大的苹果电脑，再怎么定制的软件，有 电脑+云渲染牛叉么？&lt;/p&gt;

&lt;p&gt;苹果操作系统是专用系统？为最大化发挥苹果电脑硬件威力而造？是为了自己兼容性差找接口吧？苹果的根bsd也是高大上，可人家兼容性一点也没荒废，甚至还有号称兼容性举世无双的netbsd，人家也不难用，更不要说难装到其他系统上。&lt;/p&gt;

&lt;p&gt;设定了一堆没必要的门槛，拦的是什么人呢？好像是自己用户，制造了一堆门槛，让没事干的人去琢磨，去消耗时间，获得一定的成就感，然后用来炫……这用户心理实在把握得不错。&lt;/p&gt;

&lt;p&gt;结合苹果的娱乐消费倾向，还真的是一脉相承。&lt;/p&gt;

</description>
        <pubDate>Tue, 2015 Apr 14 22:34:19 +0800</pubDate>
        <link>http://jobinson.ga/%E8%BD%AF%E4%BB%B6%E7%94%9F%E4%BA%A7%E7%BA%BF/2015/04/14/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E4%B9%8B%E7%A9%BF%E6%A2%AD%E5%A4%9A%E4%B8%AA%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E8%BD%AF%E4%BB%B6%E7%94%9F%E4%BA%A7%E7%BA%BF/2015/04/14/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E4%B9%8B%E7%A9%BF%E6%A2%AD%E5%A4%9A%E4%B8%AA%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0/</guid>
      </item>
    
      <item>
        <title>早干吗去了： 我缺骨干不缺项目</title>
        <description>&lt;p&gt;今天跑了步了，步履轻快，仍然矫健。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;有严重困难么？一般地，我给人做事都是别人有困难来找我，事情做完我就撤，继续做自己的事。&lt;/li&gt;
  &lt;li&gt;平等合作么？以我现在实力，现在也还不到我能和你公司平起平坐谈合作的时候，既不是危机也不是合作，那是什么？你们公司有我没我不是一样的么？&lt;/li&gt;
  &lt;li&gt;我弱点：我不是适合一般公司里平平稳稳的职位的。 &lt;/li&gt;
  &lt;li&gt;我过去：我快十年都是处于主导地位，虽然很窘迫，但到底也是开始进入收益期了。突然拱手让出主导？？？凭什么？我自己一个一个小项目都可以做起来，积累起来的。&lt;/li&gt;
  &lt;li&gt;我会失去：以后还有这样逐步积累的机会么？以后估计都是高大上，浮在表层上创业了吧？再也没有可以同甘共苦的同志了！！！！——但目前我却也还没有合适的办法，找到合适的同等级的同伴，同样是居高临下的！！！！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我就是太孤单了！！！要有几个帮手，我何需愁这事。何须愁了十年！！！&lt;/p&gt;

&lt;p&gt;我所有的技能和各方面的积累，都是为了自己的事业，而不是别人的事业啊。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;创业路上没有合伙人，还是我没有能力给到你支持，还是觉得亲情的缺失？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;都是！！！&lt;/p&gt;

&lt;p&gt;好多年前，我会偶尔担心找不到可发挥的平台，但十年来一直担心的是找不到同甘共苦的伙伴，也就是团队的核心骨干。&lt;/p&gt;

&lt;p&gt;我更像榕树，能一颗种子随处都可生长，即使是没有任何营养光滑的瓷砖地板上，然后经过困苦的初期，艰难地生长，营造自己的生态环境，最终长成巨树，变成一片可以孕育其他生命的树林。&lt;/p&gt;

&lt;p&gt;我更习惯一步步走，突然放弃自己已经看到黎明的脚步，这个让人难以接受！让人感觉早干嘛去了？
除非是这个路子上有意外的收获。&lt;/p&gt;

&lt;p&gt;不来的时候谁都嫌弃，要来的时候啥都两份以上……
早干嘛去了啊，早几天就不一样了。～
如果早几年，我就不用受那么多平白无故的苦。&lt;/p&gt;

&lt;p&gt;是的，我一直缺的是人！！！！&lt;/p&gt;

</description>
        <pubDate>Mon, 2015 Apr 13 23:22:41 +0800</pubDate>
        <link>http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/04/13/%E6%97%A9%E5%B9%B2%E5%90%97%E5%8E%BB%E4%BA%86/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/04/13/%E6%97%A9%E5%B9%B2%E5%90%97%E5%8E%BB%E4%BA%86/</guid>
      </item>
    
      <item>
        <title>不要和臭棋篓子下棋</title>
        <description>&lt;p&gt;不要和臭棋篓子下棋，谦让赢不回尊重。&lt;/p&gt;

&lt;p&gt;我本质上是一个很没耐性的人，虽然很多时候我表现得很有耐性，那只是谦让，或者是专注使然。&lt;/p&gt;

</description>
        <pubDate>Sat, 2015 Mar 07 17:15:31 +0800</pubDate>
        <link>http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/03/07/%E4%B8%8D%E8%A6%81%E5%92%8C%E8%87%AD%E6%A3%8B%E7%AF%93%E5%AD%90%E4%B8%8B%E6%A3%8B/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/03/07/%E4%B8%8D%E8%A6%81%E5%92%8C%E8%87%AD%E6%A3%8B%E7%AF%93%E5%AD%90%E4%B8%8B%E6%A3%8B/</guid>
      </item>
    
      <item>
        <title>我坎坷的技术之路</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;我的基础&lt;/h2&gt;

&lt;p&gt;首先，我是因为色弱被迫放弃理科的，物理化学生物等都学得是很不错的，我在理科上是很有基础的。记得初三我还利用电磁方向差异，设计了一个永动机！（当时没考虑过 原动力、损耗、逆变所需能量阈值）&lt;/p&gt;

&lt;p&gt;其次，在大学寒假期间，我几乎把我嫂子的所有编程方面的书都翻了一遍，所以还是有基础的。&lt;/p&gt;

&lt;p&gt;再次，大学时就用frontpage，dreamweaver做过静态网站几个。大学时用vfp做过一个简陋的拨号程序。&lt;/p&gt;

&lt;p&gt;再次，大学毕业后，可以说不间断接触到网络相关技术。&lt;/p&gt;

&lt;p&gt;最后，在千寻之后，自己在独立开始一项事业的时候，遭遇了严重的人才和产品开发速度跟不上市场发展的制约，于是，开始了漫长的转型：从产品设计、营销、管理、运营转型为全能（也就是多了一项技能：技术开发）。——————————————详细原因在另外一文说过。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;转型路：主要的技术轨迹&lt;/h2&gt;

&lt;h3 id=&quot;linux&quot;&gt;linux之路&lt;/h3&gt;

&lt;p&gt;早在进千寻之前，就已经开始接触，恰好和我先前秉持的理念非常契合。在千寻时，开始使用ubuntu，正式开启了我对开源领域的参与。 &lt;/p&gt;

&lt;h3 id=&quot;pega&quot;&gt;pega的印象&lt;/h3&gt;

&lt;p&gt;在千寻的时候，刚好了解到一个系统pega，可以快速编程。让我看到快速编程的潜力。&lt;/p&gt;

&lt;h3 id=&quot;cms&quot;&gt;选cms来建网站&lt;/h3&gt;

&lt;p&gt;先是选了几个cms来快速搭建网站（joomla drupal xoops），发现了很多优秀的东西，但发现离满足我需求还非常远。这一步是2008-2010年初，感谢在一个&lt;a href=&quot;http://www.ronsung.com&quot;&gt;写动态密码，内网监控，省墨打印&lt;/a&gt;朋友的指点提示下，我开始想到自己需要更多编程实现。&lt;/p&gt;

&lt;h3 id=&quot;python&quot;&gt;转入python&lt;/h3&gt;

&lt;p&gt;转入了python，选了需要更多编程技术的 web2py turbogears，web2py的第一版中文版就是我翻译的。但是，发现python处于升级换代的混乱期，使我意识到一个问题：标准要稳定，才好做扩展，才好长期投入，后来的发展，应该建构在稳定基础上。另外一个就是我感觉对编程语言缺乏足够全面的掌握，使得我非常被动。&lt;/p&gt;

&lt;p&gt;这个时候，了解了数据库兼容层，对数据库有了全新的认识，翻译了 wwwsqldesigner，重写了其sqlarchemy模块。&lt;/p&gt;

&lt;h3 id=&quot;lisp&quot;&gt;转入lisp全面学习+全面理工科化&lt;/h3&gt;

&lt;p&gt;选了一个设计非常全面，且标准稳定的 commonlisp，这是一条漫漫的路，从2010年底到2014年，我一直都在里面徘徊，中间因为自己的一些私人问题，导致学习效率极其低下。由于资料过少，自己甚至翻译了所有的内建 内名。同时也对编程的方方面面技术，有了更全面的了解和深刻掌握。&lt;/p&gt;

&lt;p&gt;另外，也想到以此为基础，设计一套复合自己需求的语言：当时叫由码（international lisp = il ，发音刚好是 由），现在叫爱编（international programing language）&lt;/p&gt;

&lt;p&gt;这个阶段，个人也全面回归理工科化&lt;/p&gt;

&lt;p&gt;对 光，热，阵列，智能操控等有了全新的掌握。&lt;/p&gt;

&lt;h3 id=&quot;js&quot;&gt;使用js&lt;/h3&gt;

&lt;p&gt;使用js的时间很长，2012年到2014年还一直利用jquerymobile 和appframework做app应用，但都比较浅层。&lt;/p&gt;

&lt;p&gt;2014年初，在又一次研究了神码后，发现其很有意思，可以运行在浏览器上，可以运行在 lisp上……实际上，如果普及后，估计可以独立出一个编译器。所以，问题在于快速学习和普及！！！！&lt;/p&gt;

&lt;p&gt;另外，在心灰意冷中，感觉需要找点存在感，于是开始网上教小朋友编程，发现了很多制约编程学习和普及的问题，比如语言（英语不过关），设备（需要每人配一电脑），配置（需要复杂的编程环境配置，对新手来说，很可能这一步就把自己搞残废了），应用（大部分人想开网店而不知道可能有更多的应用）……——————————————另外文章里提过。&lt;/p&gt;

&lt;p&gt;在当时的阶段，是根本无法做到有效的、低门槛的教学。&lt;/p&gt;

&lt;p&gt;另外，由于对js的接触日益多了起来，于是，痛下决心，决定全面学习javascript，并至少先在其上实现一个可用的 爱编解析器，这样可以不用过多复杂配置，直观见效，方便学习使用。&lt;/p&gt;

&lt;p&gt;也是在这个时候，我正式把我的博客从原先的托管，转为利用github page。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;打通任督二脉后……&lt;/h3&gt;

&lt;p&gt;拭目以待！&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;个人从技术上的伸手党，追随者，变成了生产者。&lt;/p&gt;

&lt;p&gt;其实，要不是被人严重干扰，至少可以早三年完成转型！！！&lt;/p&gt;

</description>
        <pubDate>Mon, 2015 Feb 09 10:10:57 +0800</pubDate>
        <link>http://jobinson.ga/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/2015/02/09/%E6%88%91%E5%9D%8E%E5%9D%B7%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/2015/02/09/%E6%88%91%E5%9D%8E%E5%9D%B7%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/</guid>
      </item>
    
      <item>
        <title>今天小雨</title>
        <description>&lt;p&gt;今天小雨。&lt;/p&gt;

&lt;p&gt;我自己有一堆值得关注的人要我去关注。不再关注乱七八糟的！&lt;/p&gt;

&lt;p&gt;对我有恩的人，绝大部分在上海，是我需要报答的。&lt;/p&gt;

&lt;p&gt;有的曾在我流浪街头的时候给过我饭吃，收留过我的，有的曾在我骨折的时候照顾我的……&lt;/p&gt;

&lt;p&gt;要不是我刚好需要转型，应该会一直在上海呆着的。我是觉得：发展好了才去报答，而不是让别人来提携我。&lt;/p&gt;

&lt;p&gt;下一步在哪，我不知道，要看缘分。现在只知道把我手头的事情搞定，因为这样到哪都不影响我事业发展。&lt;/p&gt;

&lt;p&gt;然后等，等一个机缘：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有可能是我家里老人都不在了&lt;/li&gt;
  &lt;li&gt;或者某个女人刚好走进我生活&lt;/li&gt;
  &lt;li&gt;或者是刚好某个好朋友召唤我&lt;/li&gt;
  &lt;li&gt;或者是我自己打开局面&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：我不稀罕女人，&lt;strong&gt;我只稀罕有情有义的人&lt;/strong&gt;，如果是女人那更好。&lt;/p&gt;

&lt;p&gt;老家这边，实在无语！！！！一个极品人渣的破坏力极大，让我无论怎么做都里外不是人。&lt;/p&gt;

&lt;p&gt;我现在需要安宁，但却整天被各方面折腾！！！&lt;/p&gt;

</description>
        <pubDate>Tue, 2015 Feb 03 21:51:31 +0800</pubDate>
        <link>http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/02/03/%E5%B0%8F%E9%9B%A8/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/02/03/%E5%B0%8F%E9%9B%A8/</guid>
      </item>
    
      <item>
        <title>认真的会喜欢认真的</title>
        <description>&lt;p&gt;如果你觉得领导在吹毛求疵，那是因为你们不在同一个频道上，你觉得的重点，和他觉得的重点不同。&lt;/p&gt;

&lt;p&gt;先顺着他的想法几次，摸透他的做法，后面就好说了。&lt;/p&gt;

&lt;p&gt;认真的人挺好的，因为一般&lt;strong&gt;认真的往往会带来意外收获，而蒙混过关的往往会带来意外遗漏&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;一般按领导说的做更对，因为毕竟最终是他去操作去负责，所以和他同个频道的话，会更好办。如果不是一个频道的，会形成牵扯，内耗，他无法以自己擅长的方式处理，可能处理效果就难以在其可控范围了，失败可能性相对大点。&lt;/p&gt;

&lt;p&gt;所以，顾全大局的做法是一般顺着领导，而不是任由自己思维。&lt;/p&gt;

</description>
        <pubDate>Tue, 2015 Jan 27 16:40:00 +0800</pubDate>
        <link>http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/01/27/%E8%AE%A4%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%96%9C%E6%AC%A2%E8%AE%A4%E7%9C%9F%E7%9A%84/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/01/27/%E8%AE%A4%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%96%9C%E6%AC%A2%E8%AE%A4%E7%9C%9F%E7%9A%84/</guid>
      </item>
    
      <item>
        <title>《大漠苍狼》感</title>
        <description>&lt;p&gt;《大漠苍狼》看了两集：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;个人能力意志磨练：这段时间最长，最痛苦&lt;/li&gt;
  &lt;li&gt;无所畏惧：已无亲人，唯恨&lt;/li&gt;
  &lt;li&gt;意志较量&lt;/li&gt;
  &lt;li&gt;建立威望&lt;/li&gt;
  &lt;li&gt;整合队伍&lt;/li&gt;
  &lt;li&gt;丈量地形&lt;/li&gt;
  &lt;li&gt;找到要道重点设卡&lt;/li&gt;
  &lt;li&gt;设税局筹资金&lt;/li&gt;
  &lt;li&gt;扩充势力&lt;/li&gt;
  &lt;li&gt;渗透反击&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只有男儿配讲情！&lt;/p&gt;

</description>
        <pubDate>Sun, 2015 Jan 25 19:10:48 +0800</pubDate>
        <link>http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/01/25/%E5%A4%A7%E6%BC%A0%E8%8B%8D%E7%8B%BC%E6%84%9F/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/01/25/%E5%A4%A7%E6%BC%A0%E8%8B%8D%E7%8B%BC%E6%84%9F/</guid>
      </item>
    
      <item>
        <title>理想与公共</title>
        <description>&lt;p&gt;心理强大，比别人眼界高，才能产生俯瞰众生的慈爱&lt;/p&gt;

&lt;p&gt;挺不喜欢这种整天想钱，想着自己，而没更高追求，没更宽广的胸怀，没更公共性的考量……&lt;strong&gt;负不起更大责任，自然无法收获更大的收益&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用理想组织起来，比用利益组织起来，更稳固，更有力量！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;追随理想组织！脱离低级趣味的人群！！！！&lt;/p&gt;

&lt;p&gt;也就是找理想组织归属&lt;/p&gt;
</description>
        <pubDate>Fri, 2015 Jan 23 16:30:10 +0800</pubDate>
        <link>http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/01/23/%E7%90%86%E6%83%B3%E4%B8%8E%E5%85%AC%E5%85%B1/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E6%95%A6%E7%85%8C%E4%B9%8B%E8%B7%AF/2015/01/23/%E7%90%86%E6%83%B3%E4%B8%8E%E5%85%AC%E5%85%B1/</guid>
      </item>
    
      <item>
        <title>对张尧学透明计算架构的理解</title>
        <description>&lt;p&gt;&lt;strong&gt;说明一：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;长文可能很多人看不下去，先说结论：&lt;/p&gt;

&lt;p&gt;张所提出并实现的透明计算，确实是世界独创的，至今仍然如此，获奖实至名归。&lt;/p&gt;

&lt;p&gt;就其所公布的信息，是自己&lt;strong&gt;实现了两套网络协议，扩展了底层，架空了操作系统&lt;/strong&gt;，使得操作系统变得无足轻重。&lt;/p&gt;

&lt;p&gt;有点类似超算的操作系统，不过超算是本地的，他这套扩展到网络了。&lt;/p&gt;

&lt;p&gt;形象比喻下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在一片树林里扎篱笆，原来是在树枝上扎——普通分布式计算，一般僵尸网络&lt;/li&gt;
  &lt;li&gt;后来有人在树干上扎，——云计算&lt;/li&gt;
  &lt;li&gt;张的团队则是跑到根部扎——透明计算，超算&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;第一部分 收集到的透明计算信息&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;自然科学一等奖得主中南大学校长张尧学简历&lt;/h3&gt;

&lt;p&gt;1956年1月生，湖南常德澧县人，1982年本科毕业于陕西西北电讯工程学院(现陕西西安电子科技大学)，1987年4月加入中国共产党，获日本东北大学博士学位。教授，博士生导师，中南大学校长，中国工程院院士，中国作家协会会员，国务院学位委员会委员，国务院信息化咨询委员会委员，计算机学会普适计算专委会委员，&lt;strong&gt;解放军总装备部军用计算机及软件技术专业组专家&lt;/strong&gt;，《International Journal of Wireless and Mobile Computing》《Journal of Autonomic and Trusted Computing》《Chinese Journal of Electronics》等国内外学术期刊的编委。曾任教育部高等教育司司长、学位管理与研究生司司长、国务院学位委员会办公室主任、985工程办公室主任、211工程建设办公室主任等学术和行政职务。著有《又见木兰》、《水随天去》等管理类散文集。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1976年10月至1978年10月，在湖南澧县余家台水电站工作，测绘员;&lt;/li&gt;
  &lt;li&gt;1978年10月至1982年07月，在陕西西安电子科技大学(原陕西西北电讯工程学院)电子工程系学习，获学士学位;&lt;/li&gt;
  &lt;li&gt;1982年07月至1983年02月，在西安电子科技大学出国研究生预备班学习;&lt;/li&gt;
  &lt;li&gt;1983年02月至1983年09月，在大连外国语学院日语培训班学习;&lt;/li&gt;
  &lt;li&gt;1983年09月至1990年03月，在日本东北大学硕士生、博士生并获硕士、博士学位;&lt;/li&gt;
  &lt;li&gt;1990年03月至1995年07月，在清华大学计算机系任教师、副教授、教授，教研组副主任;1994年6月任清华大学计算机系副系主任;1995年2月评定为博士研究生导师;&lt;/li&gt;
  &lt;li&gt;1995年07月至1995年10月，在美国麻省理工学院作访问教授;&lt;/li&gt;
  &lt;li&gt;1995年10月至1997年11月，电子部计算机司副司长兼全国电子信息系统推广办公室副主任(挂职);&lt;/li&gt;
  &lt;li&gt;1997年11月至1999年06月，清华大学计算机系教授、博士生导师;&lt;/li&gt;
  &lt;li&gt;1999年06月至2000年06月，教育部科学技术司副司长(主持工作);&lt;/li&gt;
  &lt;li&gt;2000年06月至2001年05月，教育部科学技术司司长;&lt;/li&gt;
  &lt;li&gt;2001年05月至2009年06月，教育部高等教育司司长(其中，2001年11月至2006年5月兼任中央广播电视大学校长;2004年3月至2005年1月参加中央党校一年制中青年干部培训班;2007年5月至2008年9月任北京奥组委挂职总体策划部副部长;2007年当选为中国工程院院士);&lt;/li&gt;
  &lt;li&gt;2009年06月至2011年10月，国务院学位委员会办公室主任、教育部学位管理与研究生教育司司长;&lt;/li&gt;
  &lt;li&gt;2011年11月至今，中南大学校长(副部长级)。&lt;/li&gt;
  &lt;li&gt;2011年10月21日，中共中南大学委员会委员、常委。&lt;/li&gt;
  &lt;li&gt;2011年11月1日，中南大学校长。&lt;/li&gt;
  &lt;li&gt;2015年1月9日，清华大学教授、中南大学校长张尧学院士率队完成的“网络计算的模式及基础理论研究”项目荣获2014年度国家自然科学奖一等奖。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;成就：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1995年主持研制成功国内首台 &lt;strong&gt;网络路由器&lt;/strong&gt;，并推动了这一事关国家安全和信息产业核心产品的产业化。率先在国际上开展主动服务和透明计算领域的研究，提出了在&lt;strong&gt;时空上扩展&lt;/strong&gt;冯诺依曼结构、把信息存储、运算和管理分开的透明计算理论与方法，并研究成功了基于该理论的 &lt;strong&gt;内核分布式操作系统&lt;/strong&gt; 和&lt;strong&gt;无操作系统的透明计算终端&lt;/strong&gt;，广泛用于中国军事、商务、教育和管理等领域，受到了国内外学术界的重视，被国外同行认为是“先于云计算，并包含了云计算”的原创性学术成果，并正向服务手机、云手机等移动互联网、家庭网等领域扩展。&lt;/p&gt;

&lt;p&gt;在网络基础理论方面提出了被美国同行称为“Zhang’s method”的交互式协议综合法，推动了网络基础理论的发展和进步。以第一获奖人获国家技术发明二等奖一项、国家科技进步二等奖两项；获IEEE AINA07最佳论文奖，何梁何利科技进步奖，美国IET教育基金会教育领先奖，以及亚洲开放大学联合会功勋服务奖等奖项。撰写中英文专著和教材8部，其中《计算机操作系统教程》已销售100余万册，成为国内计算机领域的主要教材之一。&lt;/p&gt;

&lt;p&gt;主持完成了多项国家级科研、国际合作及重大产业化项目。以第一完成人获国家技术发明二等奖1项、国家科技进步二等奖2项、省部级奖励5项。&lt;/p&gt;

&lt;p&gt;主要的研究方向是透明计算和主动服务。透明计算主要是研究如何解决用户通过网络上的同一终端平台使用不同操作系统和相关应用，以及在不同终端平台上使用同一操作系统和相关应用。主动服务是按照用户需求，通过计算机对现有服务进行演化，从而提供尽可能满足用户需求的网络服务的一种计算方法。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;清华大学的通稿&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://news.tsinghua.edu.cn/publish/news/4205/2015/20150112091258538502525/20150112091258538502525_.html&quot;&gt;透明计算引领“下一个计算时代”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;——“网络计算的模式及基础理论研究”获国家自然科学一等奖&lt;/p&gt;

&lt;p&gt;该研究项目是在张尧学院士带领下，由清华大学计算机系教师周悦芝、林闯、任丰原和中南大学教师王国军共同完成的。该研究在国际上率先提出透明计算的新概念，突破了冯•诺依曼结构的局限，成功研制出了具有独立知识产权的超级操作系统和一系列具有原创性与系统性的重大创新成果，对促进我国计算机及相关产业转型升级发展具有重要意义。&lt;/p&gt;

&lt;p&gt;张尧学院士带领的科研团队自1991年开始，历经20余年的潜心研究，将计算机体系结构与计算模式的创新同国家经济社会的重大需求结合，在国际上首次提出了把一个自治网络虚拟成单机的新计算模式——透明计算。该计算模式把单机总线扩展到网络带宽，从而实现一个自治域内所有计算机的存储器和CPU的统一虚拟管理，以实现在自治域网络环境下的计算、存储和管理分离，并创造性地提出了“流式计算”方法，把操作系统和应用程序转变为能让用户随时随地获取的服务，由服务器统一管理与维护，如同水、电等资源一样，在用户需要时源源不断地提供，用户使用完毕后自动流走，从而始终保持用户终端的小巧轻便和操作简易，同时可以获得大规模数据服务。&lt;/p&gt;

&lt;p&gt;研究团队还根据透明计算原理，成功研制出了具有独立知识产权的，运行在各种操作系统之下、主板之上的超级操作系统（Meta OS），使用户可以根据需要，通过近乎裸机的小终端设备获取不同操作系统平台的各类服务，从而大大降低了对用户终端的要求，解决了各种操作系统安全漏洞及多操作系统的兼容与跨平台问题。该团队还提出了高可靠网络协议和开发方法，研制了多操作系统远程加载协议（MRBP）和网络服务访问协议（NSAP），保证可靠的跨平台操作，将网络互连平台由较高的网络层下降到计算机芯片和操作系统间的接口层，从而打开了被国外厂商控制的芯片与操作系统之间的“黑匣子”，并可以通过在接口层设计保护程序，防止上层软件系统受到攻击和安全漏洞威胁，解决信息网络的安全问题。&lt;/p&gt;

&lt;p&gt;透明计算这一成果在国际上开辟了一个新的研究领域和发展方向，为网络计算提供了全新的模式和理论基础，得到了学术界的高度评价，认为“透明计算取代已经控制了计算机系统思想和实践至少60年之久的传统冯•诺依曼结构”。Intel公司总裁Renee James也认为：“透明计算提供无缝的、跨平台的用户体验，代表了下一个计算时代。”国内外有40多所大学和科研机构正进行相关跟踪研究，200多家国际主要技术媒体对此进行了长篇报道和评论，不少评论认为“这将是首个由中国推动的计算技术”。&lt;/p&gt;

&lt;p&gt;目前，该项目已研制成功多种产品，应用于国防、教育、互联网等领域，未来将进一步推动透明计算与大数据、移动互联网相结合，对国家社会经济发展和网络信息安全提供支撑，推动相关产业升级换代，形成新的学科领域和研究方向。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;申请获奖用的论文&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Yaoxue Zhang and Yuezhi Zhou. Transparent Computing: A New Paradigm for Pervasive Computing, LNCS 4159, 2006 年第1 卷1-11 页.&lt;/li&gt;
  &lt;li&gt;Yaoxue Zhang and Yuezhi Zhou. 4VP+: A Novel Meta OS Approach for Streaming Programs in Ubiquitous Computing, in Proc. of the IEEE 21st International Conference on Advanced Information Networking and Applications (AINA 2007), 2007 年第1 卷394-403 页.&lt;/li&gt;
  &lt;li&gt;Yaoxue Zhang, K. Takahashi, N. Shiratori, and S. Noguchi. An Interactive Protocol Synthesis Algorithm Using a Global State Transition Graph, IEEE Transactions on Software Engineering, 1988 年14(3)卷 394-404 页.&lt;/li&gt;
  &lt;li&gt;Yaoxue Zhang, Hua Chen. A knowledge-based dynamic job-scheduling in low-volume/high-variety manufacturing, Artificial Intelligence in Engineering (UK), 1999 年13(3)卷 241-250 页.&lt;/li&gt;
  &lt;li&gt;林 闯 . 计算机网络和计算机系统的性能评价, 清华大学出版社， ISBN:7-302-04267-5, 2001 年卷109-129 页.&lt;/li&gt;
  &lt;li&gt;Fengyuan Ren, Chuang Lin, Xunhe Yin. Design a congestion controller based on sliding mode variable structure control, Computer Communications, 2005 年28(9)卷 1050-1061 页.&lt;/li&gt;
  &lt;li&gt;Fengyuan Ren, Chuang Lin, Bo Wei. A robust active queue management algorithm in large delay networks, Computer Communications, 2005 年 28(5)卷 485-493 页.&lt;/li&gt;
  &lt;li&gt;Jianer Chen, Guojun Wang, and Songqiao Chen. Locally subcube-connected hypercube networks: theoretical analysis and experimental results, IEEE Transactions on Computers, 2002 年51(5)卷 530-540 页.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-4&quot;&gt;中途退出成员提供的信息&lt;/h3&gt;

&lt;p&gt;作为前透明计算实验室的一员，来谈谈自己的想法好了。&lt;/p&gt;

&lt;p&gt;首先张的透明计算在我校是分为几个项目来做的，每个项目有一个小团队。包括PC、Android手机，平板的透明计算OS，还有基于这个“理念”的移动医疗等应用项目。&lt;/p&gt;

&lt;p&gt;这里面PC端的OS就是我所在的小团队弄出来的。&lt;/p&gt;

&lt;p&gt;其它项目团队怎么弄的我不清楚，PC端基本都是我设计的，实现方案改过几次：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最初和Intel一起改PXE（这玩意网吧无盘就用它），想多台机器共用一个镜像，但更改的数据分别保存，搞了半天发现PXE跨不了局域网，也用不了无线，不能达到张提出的要求，被推翻了。&lt;/li&gt;
  &lt;li&gt;然后找了个开源的iPXE，号称支持广域网和无线，自定义脚本等诸多功能，整了半天把原型整出来了，又发现丫对无线的支持烂成渣，只支持一两个 802.11g的芯片组，尝试自行写无线驱动，还是不可行，因为要支持的无线网卡太多，只要有机器的网卡驱动没有，那这台机器就无法使用无线来加载透明计算系统，所以又被推翻。&lt;/li&gt;
  &lt;li&gt;截止至我离开前的方案，整了个开源的虚拟机（vbox），虚拟机上运行透明计算系统，存储的操作系统放在服务器，用iSCSI传输，运行的真正操作系统（Windows那些）上装了些自己写的程序做管理和监控。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基本结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;真实操作系统（Windows、Linux）
————————————————-
虚拟机
————————————————
透明计算管理程序
————————————————
Linux
———————————————–
机器硬件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我走之前，所在团队的工作基本上就是在定制Linux和改虚拟机。。。还为这套东西增强些功能。。&lt;/p&gt;

&lt;p&gt;对于这整套东西，我的心里话其实是：没法用。真正使用的操作系统运行在一个虚拟机上，能快到哪去？更别说镜像还是放在服务器上用iSCSI协议来传 输的。央视的新闻我看了，播到展示透明计算机器运行着XP系统的时候，我都笑傻了，为啥？Win7及更新的操作系统可是可以用，但基本慢成狗！如果再在那 上面看个视频，能有10帧就谢天谢地了！首次启动Win7至少需要5分钟以上，如果你还处于10M以下的小水管的话，呵呵呵呵。。。最好别等了。&lt;/p&gt;

&lt;p&gt;虽然团队其他人一直还在优化，但说实话效果很有限，而且这个东西我们自己都认为实在没有什么技术含量，离实用更差得远，这次听说获奖，其它团队怎么样我不清楚，但至少我们做的这个东西确实是没任何资格的。&lt;/p&gt;

&lt;p&gt;还在团队的时候，老师给派新同学进来，要跟他们解释这个东西是什么，我们的回答就是“你理解成用虚拟机搭了个网吧无盘环境就好了”。。。&lt;/p&gt;

&lt;p&gt;上面说的这些仅限我所在团队的工作内容，透明计算还有其他团队，包括其他高富帅学校也有团队在搞，他们的工作我不清楚，肯定比我们做的要高大上得多吧。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;张尧学自己的访谈&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://v.qq.com/page/h/v/q/h0145ebh1vq.html&quot;&gt;原型视频地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其获奖项目“网络计算的模式及基础理论研究”被通俗称为“透明计算”。据报道，这项研究主要在三个方面取得突破：研制了超级操作系统(Meta OS)、实现了计算与存储分离、实现了软硬件分离。&lt;/p&gt;

&lt;p&gt;计算与存储分离很早就能实现了，网吧就是这么干的；这个概念不就是甲骨文等公司20年前提出的NC(网络计算机)吗？“透明计算”的概念乍听起来与云计算似乎无异，它到底有哪些独特之处呢？冯·诺依曼结构被颠覆了吗？Intel的透明计算和张尧学的透明计算是一回事吗？一个长期担任行政职务的人怎么会有时间做科研？张尧学近日接受科技日报独家专访&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;“透明计算”与“云计算”&lt;/h4&gt;

&lt;p&gt;第一，云计算是由厂商通过服务器端的架构提供计算资源的服务，用户终端仅仅作为服务的接收端而存在，而透明计算主要关注用户端。用户需要服务时，就从服务器端将需要的软件或数据通过块或页的方式碎片化调用并主要在终端完成计算，而且终端可以装或不装任何数据、软件包括操作系统；
第二，云计算主要解决数据的海量存放和使用问题，对软件的云化、特别是操作系统的云化没有提出好的解决方案，而透明计算则较好地解决了这个问题；
第三，透明计算还包括了云计算不具备的全过程管理、带宽与缓冲管理等功能；
第四，由于云计算的重点不在终端的使用情况上，因而其在终端安全性上没有突破，而透明计算在终端安全性上有很好的考虑。&lt;/p&gt;

&lt;p&gt;“透明计算的实现可以在多个层面，例如在硬件层之上、在中间件层或在应用层。”在张尧学看来，透明计算概念的提出应该早于云计算。&lt;/p&gt;

&lt;p&gt;“云计算大概是从2008年左右被国内熟知，而我们最早做‘透明计算’相关研究是1998年，但当时我们没有称它为这个名字，这个名字是2003年左右微软亚洲研究院的一位领导在参观我的实验室时给起的。”他说。&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;发端于索普卡的“透明计算”&lt;/h4&gt;

&lt;p&gt;“1998年，一台电脑的售价上万元，升级换代太快，而且病毒很多，我的想法是能不能让电脑变得更简单、更便宜、更安全和跨平台。”张尧学说，他在开发网络计算机的基础上，尝试把操作系统从原本已十分精简的终端上去掉，提出了没有操作系统的计算模式，并着手开发终端系统。&lt;/p&gt;

&lt;p&gt;网络计算机的概念20年前就已提出。张尧学说，但甲骨文等公司的网络计算机用的并不好。“Sun公司还给我们送过一套Sunray系统，一台服务器加40个终端，价格要100万多元人民币，我记得每个终端要1000多美元。虽然是赠送，但不好用，当时也只能用一个操作系统。我就考虑能不能用一种更好的方式，管理网络资源，使得计算机终端更好用、更安全，而且能兼容不同操作系统。”&lt;/p&gt;

&lt;p&gt;张尧学说，最初的研究从无盘站开始，但逐渐发现无盘站有很多局限，如只能识别一个操作系统，速度慢，执行上受用户数、对病毒防护差等的限制。“不过无盘站提供了PXE(预启动执行环境)协议，我们就在这个基础上做扩展。”&lt;/p&gt;

&lt;p&gt;几年后，张尧学的团队做出索普卡电脑。据称，这套系统相当于用一台当时的家用PC，可以带动30个终端，而且可以上多个操作系统。 “索普卡电脑的‘瘦’体现在：它本身是台裸机，没有任何软件，计算机运行所需的操作系统软件和应用软件都能从服务器下载得到。” 一篇题为《索普卡：中国PC “瘦身”之道》的报道这样写道。&lt;/p&gt;

&lt;p&gt;张尧学说，索普卡有两项专利，还转让给了联想等公司。索普卡当时在贵州、云南等偏僻地区及部分边境部队和企业应用情况良好，2003年获得教育部科技进步一等奖以及2004年度的国家技术发明奖二等奖。&lt;/p&gt;

&lt;p&gt;“但是我觉得大学里的科研人员的主要任务应该还是从理论和研究上取得突破，而不是做产品。做产业需要融资、销售和生产等专业团队，这不是我的强项，何况我还在教育部任职。所以我就开始想把索普卡往移动网络、广域网方向推，从理论上思考怎样才能在网络环境下使计算机的使用更加安全和简单。”张尧学说，他从2004年开始这方面的理论研究。&lt;/p&gt;

&lt;p&gt;张尧学于1999年至2011年任职教育部，但他告诉记者：“我在调到教育部之前已和时任教育的主管领导谈好，要继续在清华大学做科研。这位领导和清华大学都是同意的。因此，我出差很少，而且晚上和休息日基本都在实验室，这一点，我想清华大学的同事们都可以证明。”&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;与英特尔的合作&lt;/h4&gt;

&lt;p&gt;张尧学认为自己长期教授操作系统课程，以及从事协议的研究，对底层协议很熟悉。“操作系统两个最核心的内容是中断和调度，而这两个机制都是只针对单机，我就想能不能在底层硬件之上有个中间层，将操作系统和应用在内的软件从网络上加载到这个中间层上运行，并实现不同软件（包括操作系统及应用）的按需选择和按需调度，从而让不同的硬件和不同的软件系统连接。但这是一个黑匣子，需要反汇编。当时学生们做得很辛苦，后来好歹做成了，但效果不是太理想。这一是由于带宽，二是每个操作系统都要对底层反汇编，很难。”张尧学说。&lt;/p&gt;

&lt;p&gt;与英特尔的合作为该技术的更广泛应用起了很大作用。英特尔致力推广新一代BIOS及其接口标准，即EFI（可扩展固件接口），目前90%的新生产个人电脑已经采用了 EFI及其后的UEFI（统一可扩展固件接口）技术。“用EFI技术来实现透明计算，既支持多操作系统的选择和执行，又很大程度缓解了原来难以在不同硬件平台上运行问题。”&lt;/p&gt;

&lt;p&gt;谈到与英特尔的合作，张尧学说，英特尔在2005年参观了他的实验室并初步接触后，双方于2007年2月签署合作协议后长期合作“至今，我们共签有3个合作协议，Intel公司完全承认我们的知识产权。由于商业协议的条款，我不能透露太多的合作细节。但INTEL美国总部软件与服务部平台技术中心总经理MichaelA.Greene在2013年4月英特尔信息峰会期间有个主题演讲‘透明计算时代’，其中第7、第8、第9页是关于我们合作的描述。这篇讲演的PPT，就挂在&lt;a href=&quot;http://media.cs.tsinghua.edu.cn/~zyx/&quot;&gt;我的清华大学主页下&lt;/a&gt;。”&lt;/p&gt;

&lt;p&gt;“我们的目标是将底层软件做成通用软件、扩展EFI，成为国际标准。而中层和高层的透明计算实现则正在进一步研究。我认为，HTML5是实现透明计算的一种技术手段。可能理解的不对，供大家批评。”张尧学说，“至于Intel的透明计算与我提出的透明计算有什么关系？建议大家采访Intel。我在这方面有充足的证据回答大家的质疑。”&lt;/p&gt;

&lt;p&gt;他表示，目前英特尔已经在台式机、笔记本、上网本、移动互联网设备、平板电脑和智能手机等多个平台上实现了透明计算，包括上海交通大学在内的单位都已使用了英特尔的台式机透明计算系统。而不少大学则购买了由清华专利转让的台式机系统。“清华大学、中南大学和清华的毕业生还基于透明计算思想，研制成功了用手机远程使用多种操作系统和应用的手机透明计算系统等新的系统原型。这次基本上都已公开，我们的知识产权有可能会受到损失。”&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;与网络计算机等技术的区别&lt;/h4&gt;

&lt;p&gt;总结与网络计算机、远程+VPN+PNS 等技术的区别，张尧学说，“透明计算”的最大突破是提出并部分实现了使终端如何变小以及无缝连接（跨硬件和软件平台）的思想和方法。按照此方法，研制了一个分布式超级操作系统MetaOS。它不仅包括远程启动协议MRBP（I, II）、网络服务访问协议NSAP，还包括可以管理调度不同的操作系统和网络带宽等资源的I/O man以及一个轻量化的网络协议栈等，并可沿使用路径监控网络上的使用情况。他透露，最近某央企控股公司也在国家重大专项支持下基于他们的原理和早期版本研制成功了MetaOS的新版本，并有重大应用。&lt;/p&gt;

&lt;p&gt;一个理想的MetaOS能跟踪和记录来自于不同用户的访问、解决从端系统到服务器之间的各点资源的监控和管理，例如沿途的带宽、缓存等。“以前的计算机是由操作系统来调度各种软件的，但如何以碎片方式调动不同的操作系统，我没听说别人做过。”张尧学说。&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;产业化前景可期&lt;/h4&gt;

&lt;p&gt;“很多人说我们提出的计算与存储分离早就有了，我也做了十几年了，而且我们有专利。”张尧学说，“而且我们的技术可以让用户根据需要调用资源，指令是碎片化进入终端的，不是操作系统和应用程序全部，这样可以极大简化终端，带宽并不是主要问题”。&lt;/p&gt;

&lt;p&gt;他解释道，简单说来，MetaOS分为客户端和后端软件两部分。如果用户指定某台电脑为储存数据的后端，就安装后端软件，而他要用到的其他电脑、手机及可穿戴设备则需安装一个客户端软件。如此一来，他打开任何一个终端都能随意调用后端的程序和数据。清华和中南大学的透明计算研究团队则做出了更多的新产品原型，包括定制应用和不同操作系统的透明手机。&lt;/p&gt;

&lt;p&gt;他介绍道，致力于将透明计算技术产业化的工作开展，在可穿戴设备、智慧家庭、医疗和教育大数据等方面都会有巨大的应用前景。例如，今后出国不用带笔记本电脑，远在非洲就可以存取和操作在北京计算机中的资源；医生在手机上可以使用专业软件调出并分析如核磁共振影像等各种医疗数据等等。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;第二部分 解剖张和透明计算&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Those who can, Do; and those who cann’t, Teach; and those who cann’t anything, Suck!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-12&quot;&gt;“透明计算”服务端的结构&lt;/h3&gt;

&lt;p&gt;先看看 普通电脑，云计算，chromeos，pxe 和 “透明计算” 的软硬件结构区别！&lt;/p&gt;

&lt;p&gt;一般一台计算机的软件从硬件层到外应用软件层的结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;资源供应方=用户方
核芯+主板——》基本硬件管理层（比如bois uefi）——》硬件利用层（比如linux核心）
——》基本图形系统（比如x）
——》用户界面系统（比如kde gnome）——》网络服务（远程桌面之类）
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-13&quot;&gt;资源和用户端分离的系统：&lt;/h4&gt;

&lt;p&gt;超算和云计算：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;资源端：云端服务器供应软硬件资源（核芯+主板——》基本硬件管理层——》硬件利用层——》网络服务）
——》资源管理调度接口

用户端：核芯+主板——》基本硬件管理层——》硬件利用层——》网络服务——》命令行下即可管理调度或者图形界面下管理软件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chromeos是这样的：其中的图形界面部分不同于一般的系统，比较穿透。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;资源端：云端服务器供应软硬件资源
——》资源管理调度接口

用户端：核芯+主板——》基本硬件管理层——》硬件利用层
|——》网络服务
|——》基本图形系统——》图形界面
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;无盘站&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;资源供应方：云端服务器供应软硬件资源
——》远程桌面

用户端：——》用户使用
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;无盘站：缺陷是原有协议穿透不了局域网。&lt;/p&gt;

&lt;p&gt;超算和无盘站都是局域网，用高速网线连接的。&lt;/p&gt;

&lt;p&gt;张的透明计算：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;资源端：核芯+主板——》基本硬件管理层
|——》硬件利用层（meta os）
|——》网络服务（两个自写协议）

用户端：核芯+主板——》基本硬件管理层——》硬件利用层
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;几种比较贴切的描述：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;网络版bois或者uefi，且加强了功能：极其底层的系统，在一般操作系统还没启动时，就已经启动，但又还没底层到主板上的引导程序。非主板烧录的，最接近底层硬件的操作系统。&lt;/li&gt;
  &lt;li&gt;linux核心+网络服务 的弱化版：相比较linux的完整操作系统，其功能主要几种在资源组织和资源分配，功能上不如linux复杂，比如没必要管理声音和图形渲染。&lt;/li&gt;
  &lt;li&gt;超级加强版 路由器操作系统。张之前就设计过一个 网络路由器系统，现在加强其功能了：硬件兼容更强，网络功能更强大，资源调度更透明方便，可调用的资源更多。&lt;/li&gt;
  &lt;li&gt;民用版超算：非常像超算，但资源并不像超算那样集中在机房，内部用高速网线或连接线连接，而是可以使用广域网的资源（可以理解为只使用普通网线）。&lt;/li&gt;
  &lt;li&gt;底层版分布式计算：可调用不仅仅是局域网的网络资源，而且是极其底层的资源，而不是被层层包装了的网络资源、云服务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以说，meta os目前仍然是世界独步的，惟一无二的，有点接近的系统应该是 超算用的系统或者是 intel之类芯片设计商之前鼓吹的，嵌入主板的 微系统。&lt;/p&gt;

&lt;p&gt;用一个通俗的比喻可能方便理解：&lt;strong&gt;在一片树林里扎篱笆，原来是在树枝上扎，后来有人在树干上扎，张的团队则是跑到根部扎。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在一片树林里扎篱笆，原来是在树枝上扎——普通分布式计算，一般僵尸网络&lt;/li&gt;
  &lt;li&gt;后来有人在树干上扎，——云计算&lt;/li&gt;
  &lt;li&gt;张的团队则是跑到根部扎——透明计算，超算&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结为三句：&lt;strong&gt;系统很底层，管理的资源很广泛，资源使用非常灵活！&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;资源分布形式（待细化）&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;不同计算机模式&lt;/th&gt;
      &lt;th&gt;家用电脑&lt;/th&gt;
      &lt;th&gt;chromeos&lt;/th&gt;
      &lt;th&gt;云服务&lt;/th&gt;
      &lt;th&gt;透明计算&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;存储&lt;/td&gt;
      &lt;td&gt;本地&lt;/td&gt;
      &lt;td&gt;远程，小部分本地缓存&lt;/td&gt;
      &lt;td&gt;远程，小部分本地缓存&lt;/td&gt;
      &lt;td&gt;远程，小部分本地缓存&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;运算&lt;/td&gt;
      &lt;td&gt;本地&lt;/td&gt;
      &lt;td&gt;远程&lt;/td&gt;
      &lt;td&gt;远程&lt;/td&gt;
      &lt;td&gt;远程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;管理&lt;/td&gt;
      &lt;td&gt;本地&lt;/td&gt;
      &lt;td&gt;远程&lt;/td&gt;
      &lt;td&gt;远程&lt;/td&gt;
      &lt;td&gt;远程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;界面交互渲染&lt;/td&gt;
      &lt;td&gt;本地cpu或 图芯（尽可能强）&lt;/td&gt;
      &lt;td&gt;本地弱终端（不需要强）&lt;/td&gt;
      &lt;td&gt;本地终端（可强可弱）&lt;/td&gt;
      &lt;td&gt;本地终端（可强可弱）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;细化下轻本地端的资源分布&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;内容&lt;/th&gt;
      &lt;th&gt;远程管理&lt;/th&gt;
      &lt;th&gt;远程桌面&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;交互形式&lt;/td&gt;
      &lt;td&gt;命令行&lt;/td&gt;
      &lt;td&gt;图形交互界面&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一般远程桌面：只是一个视频录像，所有的计算都是在远程完成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;——》远程操作系统启动后，启用网络服务
——》远程操作系统图形界面 远程渲染后以 流 方式传输到本地
《——》传入本地或远程数据
——》调用远程操作程序
——》处理后，数据返回远程
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所有计算都是在远程完成，但减少了不必要的开支，更省网络流量。最大化集约化简化本地终端负载：前提是网络速度足够的情况下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;——》远程操作系统启动后，启用网络服务
——》调用远程操作界面，本地渲染，
    《——》传入本地或者远程数据，
——》调用远程操作程序，
    《——处理后，数据返回远程
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-15&quot;&gt;服务端资源管理&lt;/h3&gt;

&lt;p&gt;云计算、超算等，和这个问题解决方案应该是相同的。&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;如何解决硬件兼容问题&lt;/h3&gt;

&lt;p&gt;上面是简单的基本架构，如何实现呢？&lt;/p&gt;

&lt;p&gt;如果：世界上只有一种硬件，那这一步很好办。可惜，世界上各种硬件五花八门，驱动也是五花八门。兼容问题无穷无尽，层出不穷……&lt;/p&gt;

&lt;p&gt;硬件兼容问题有多么令人焦躁呢：linux创始人针对 硬件商 直接是举中指，爆粗口。&lt;/p&gt;

&lt;p&gt;如何解决？一般的思路是简化接口，只调用不同硬件底层较为通用的接口，而规避使用那些硬件特有的接口。或者更进一步，做一个兼容层（比如kde用phonon），来转换各个硬件不同的接口，规范使用这些硬件特有接口。&lt;/p&gt;

&lt;p&gt;但这只是理论上可行，现实中需要多少工作量呢？海量！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;不同指令集和底层代码，不同应用程序调用不同的库函数，就是一个“客户端”3个字这么容易？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这就是其之所以获奖的关键了，他的团队就是搞定了这个！！！！&lt;/p&gt;

&lt;p&gt;做一个兼容层确实是体力活，就是整天查对各个指令集，查找其差异和相同，然后归纳总结。&lt;/p&gt;

&lt;h3 id=&quot;section-17&quot;&gt;如何解决网络问题？&lt;/h3&gt;

&lt;p&gt;上面前团队成员暴露出来的信息看，好事多磨，在前期想偷懒，借用现成的东西，结果至少改了三次，还没真正踏进门里。最后估计是痛定思痛，干脆自己重写了两个协议才算搞定。&lt;/p&gt;

&lt;p&gt;参照清华的通报搞，很明显，在这家伙离去后，整个团队进行了重大革新。&lt;/p&gt;

&lt;p&gt;不同于&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;已有的远程启动(PXE)所使用的TFTP协议&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（单线程，速度不快，无法适应高速的界面初始化和大型任务的高速交互要求）。自己设计了一套也是底层的网络协议：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;高可靠网络协议和开发方法，研制了多操作系统远程加载协议（MRBP）和网络服务访问协议（NSAP），保证可靠的跨平台操作。&lt;/p&gt;

  &lt;p&gt;将网络互连平台由较高的网络层下降到计算机芯片和操作系统间的接口层&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;网速问题的解决：并发，分布式。&lt;/p&gt;

&lt;p&gt;多说一句：实际上，只要能够流畅视频，就足够做所有事了，反正真正计算都是在服务端，转成视频流传输就很好看了。&lt;/p&gt;

&lt;h3 id=&quot;section-18&quot;&gt;用户如何管理资源&lt;/h3&gt;

&lt;p&gt;这相对来说已经非常简单了，主要是给各个操作系统做客户端的问题，虽然仍然是兼容性问题严重，但已有现成框架基本可以胜任，体力活。&lt;/p&gt;

&lt;p&gt;目前硬件情况和软件情况，注定还无法如 服务端那样做到非常底层，但理论上是可以做到底层裸主机+客户端，但要硬件生产商配合。&lt;/p&gt;

&lt;h3 id=&quot;section-19&quot;&gt;关于操作系统和应用软件大小同步问题&lt;/h3&gt;

&lt;p&gt;应用软件的下载，大家既然习惯下载软件的等待，那这样的等待也同样应该允许在别的平台上如此，比如这个 meta os上的软件。&lt;/p&gt;

&lt;p&gt;也就是说，只要讨论系统大小和网速是否影响体验即可！&lt;/p&gt;

&lt;p&gt;1、 装操作系统的起始文件需要多大？大概10m！！！！&lt;/p&gt;

&lt;p&gt;比如装debian，只下载 linux和initrd.gz两个文件 一共6M，如果没有引导程序，再下载个引导程序，总共10m。&lt;/p&gt;

&lt;p&gt;然后从网络获取安装的所有的debian包。&lt;/p&gt;

&lt;p&gt;下载操作系统+桌面软件需要多大？&lt;/p&gt;

&lt;p&gt;damn small linux 整个系统外加浏览器总共50m！！！&lt;/p&gt;

&lt;p&gt;这可以参考 slax 这是个u盘系统，封装了kde这个大大的桌面和简单程序，总共也才200多m。&lt;/p&gt;

&lt;p&gt;debian的全软件镜像，也不过4.4 GB&lt;/p&gt;

&lt;p&gt;windows理论上也是可以这样的：但微软系统没有类似linux那样的细分，网速不够，使得这种网络安装不现实。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;我心如水_2003_PE_v19.36_珍藏版.ISO 74.3M
我心如水_Win8_x64_PE_v19.36.IS 415.8M
我心如水_XP3_2003_Win8_PE_v19.36.ISO 791.7M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些镜像，什么东西占用最多？图片、音频、视频，还有vc运行环境。如果把这几个都缓存到本地呢？&lt;/p&gt;

&lt;p&gt;再看看一个&lt;a href=&quot;http://bbs.wuyou.net/forum.php?mod=viewthread&amp;amp;tid=356101&amp;amp;extra=page%3D1&quot;&gt;全功能镜像&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;软件镜像843.6MB
新增加的软件有：
freehand mx;
flash mx;
photoshop cs3;
coreldraw 9;
VMware Workstation 6;
光影魔术手；
Cool Edit Pro（音频处理专家）
迅雷精简版
修改QQ2014为腾迅TM(因为QQ经常更新而旧版不能使用，用TM也一样可以用QQ的大部份功能，比较稳定）；
修改Diskgenius为自己测试过的4.6.1专业版，有些版本经常出现一些错误，我用过所有版本，也就这版功能最强大最稳定了，新版还是有BUG；
WPS
OFFICE2003（短小精悍）
修改和DIY的PE工具软件，在PE中就能订制PE，不需要经常重启测试；
ADDS10硬盘分区助手；
傲梅分区助手；
重新整合了KMPLAYER播放器；（能够播放更多格式视频）
另外一些实用的小工具
……
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、对于超大软件：&lt;/p&gt;

&lt;p&gt;对于超大软件怎么办？不是流行了好长时间的C/S结构么？大的部分不需要完全下载到本地，本地弱终端。几个常用的办公用软件，目前都已有这种方案。&lt;/p&gt;

&lt;p&gt;现在对网速方面最有可能形成瓶颈的是超大型游戏！——也是有办法的，但目前还不算成熟。&lt;/p&gt;

&lt;p&gt;如果非要用nero这种分明几m就搞定（linux下刻录软件就几m）却生生整成几g的玩意，那啥网速也没办法。让这种垃圾软件死了算了。&lt;/p&gt;

&lt;p&gt;3、 这些操作系统安装所用的 包管理工具 其核心是什么？就是一个粗粒度 差分同步！&lt;/p&gt;

&lt;p&gt;所有数据，最终的存储形式都是一样，所以它们的同步方式是一样的——当然，有时为了提高效率，会使用一些特别的算法，比如压缩，调不同粒度。&lt;/p&gt;

&lt;p&gt;软件包相对文件来说更加简单粗暴：只需要名字和版本比较。&lt;/p&gt;

&lt;p&gt;4、用vnc演示的问题：用虚拟机模拟硬件和网络，比如用qemu，模拟出几台不同硬件的设备，网络方式设为桥接，就可以在一台电脑里模拟一个小型局域网，这时使用vnc有何什么需要解释的么？不用vnc的资源可控的高效管理办法，难道要逐个开小窗口？用来模拟的电脑硬件允许么？&lt;/p&gt;

&lt;p&gt;另外，我猜啊，如果真的去细究 qemu和meta os的代码，估计它们相同度肯定很高——呵呵，这不是废话嘛！底层的代码都是硬件商提供的，不相同才怪了呢。&lt;/p&gt;

&lt;p&gt;其实吧，这个演示问题还是很大的，因为他们改的底层，你改bois，或者改grub的时候，能在win里看出差别么？？？？？？&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;工程难度和工作量&lt;/h3&gt;

&lt;p&gt;就工程实现难度不低于一般的操作系统，比如linux，windows，主要是硬件方面的原因，但流行普及后，硬件兼容问题解决，会大幅度简化操作系统的设计。&lt;/p&gt;

&lt;p&gt;其实，这不是创不创新的问题，而是有没有实力的问题，很多人，都想要这么省略，甚至直接 核芯+主板+网络服务（路由器就这样的），但 核芯+主板 的产业并不掌握在自己手中，无法主导。&lt;/p&gt;

&lt;p&gt;这样不仅仅是实力，还有实战！是一手把这个极其繁重的工作给搞下来了。&lt;/p&gt;

&lt;p&gt;就工作量而言，海量的软硬件工作！&lt;/p&gt;

&lt;p&gt;另外，世界上有实力实现这个设想的，不多，也就一只手数得过来。&lt;/p&gt;

&lt;h3 id=&quot;section-21&quot;&gt;关于主动服务&lt;/h3&gt;

&lt;p&gt;其实就是 推送服务，在掌握了计算机主要资源之后，这个不难做到。&lt;/p&gt;

&lt;h3 id=&quot;section-22&quot;&gt;对张个人的理解&lt;/h3&gt;

&lt;p&gt;他应该是实战型+战略型的人物。&lt;/p&gt;

&lt;p&gt;人家是“工程院”院士！！不是中科院院士，擅长的是实现，是工程能力，实现能力，不是理论。论文？对搞工程的人来说，那都是事后有闲的时候补充论述。&lt;/p&gt;

&lt;p&gt;其所做的工作是完成了一整套完整的新型系统，这里面必然涉及到大量的技术问题和海量的工作量。能够完成，至少说明其管理能力卓越，解决问题能力卓越。&lt;/p&gt;

&lt;p&gt;结合其是解放军总装技术专家，实战部分应该是给保密单位研发操作系统了，所以大众无法了解。&lt;/p&gt;

&lt;p&gt;总之，人家提出了一个有创新性的项目，并且有效组织了一群人，通过创新的办法克服各种工程难题，实现了。获重奖无可厚非，至于获得啥级别的，看其对评估单位的重要性，所以实至名归。&lt;/p&gt;

&lt;p&gt;看看清华的通报稿，个人觉得，光这两点，就够获重奖了：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;成功研制出了具有独立知识产权的，运行在各种操作系统之下、主板之上的超级操作系统（Meta OS），使用户可以根据需要，通过近乎裸机的小终端设备获取不同操作系统平台的各类服务，从而大大降低了对用户终端的要求，解决了各种操作系统安全漏洞及多操作系统的兼容与跨平台问题。&lt;/p&gt;

  &lt;p&gt;该团队还提出了高可靠网络协议和开发方法，研制了多操作系统远程加载协议（MRBP）和网络服务访问协议（NSAP），保证可靠的跨平台操作，将网络互连平台由较高的网络层下降到计算机芯片和操作系统间的接口层&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;至于那些瞎鼓噪的，借用Gentoo创始人Daniel Robbins一句话：对于工程的事，请&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;talk is cheap, show your code!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这句话也是要对张说的！&lt;/p&gt;

</description>
        <pubDate>Fri, 2015 Jan 16 12:25:20 +0800</pubDate>
        <link>http://jobinson.ga/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/2015/01/16/%E5%AF%B9%E5%BC%A0%E5%B0%A7%E5%AD%A6%E9%80%8F%E6%98%8E%E8%AE%A1%E7%AE%97%E7%9A%84%E7%90%86%E8%A7%A3/</link>
        <guid isPermaLink="true">http://jobinson.ga/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/2015/01/16/%E5%AF%B9%E5%BC%A0%E5%B0%A7%E5%AD%A6%E9%80%8F%E6%98%8E%E8%AE%A1%E7%AE%97%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      </item>
    
  </channel>
</rss>
